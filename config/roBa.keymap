#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27  // Left-hand keys.
#define KEYS_R 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33  // Right-hand keys.
#define THUMBS 34 35 36 37 38 39 40 41                        // Thumb keys.
#define MOUSE 4
#define SCROLL 5
#define NUM 2

/* Global defaults */

#define COMBO_TERM 30
#define TAPPING_TERM 250
#define QUICK_TAP_TERM 250
#define REQUIRE_PRIOR_IDLE 175

&mt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
    quick-tap-ms = <QUICK_TAP_TERM>;
    require-prior-idle-ms = <REQUIRE_PRIOR_IDLE>;
};

&lt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
    quick-tap-ms = <QUICK_TAP_TERM>;
};

/* Left-hand HRMs. */

/ {
    behaviors {
        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
    };
};

/* Right-hand HRMs. */

/ {
    behaviors {
        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
};

/* Mod Morphs (changes to 'shift + key' behavior). */

/ {
    behaviors {
        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        semi_comma: semi_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_COMMA";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        question_exclamation: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "QUESTION_EXCLAMATION";
            bindings = <&kp QMARK>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <10 0>;
            layers = <0 2>;
        };

        forward_slash {
            bindings = <&kp SLASH>;
            key-positions = <20 8>;
            layers = <0 2>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <11 1>;
            layers = <0 2>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <12 2>;
            layers = <0 2>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            layers = <0 2>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            layers = <0 2>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <10 22>;
            layers = <0 2>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <23 11>;
            layers = <0 2>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <24 12>;
            layers = <0 2>;
        };

        Lparen {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <1 2>;
            layers = <0 2>;
            require-prior-idle-ms = <175>;
        };

        Rparen {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <2 3>;
            layers = <0 2>;
            require-prior-idle-ms = <175>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <25 13>;
            layers = <0 2>;
        };

        underline {
            bindings = <&kp UNDERSCORE>;
            key-positions = <19 7>;
            layers = <0 2>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <31 19>;
            layers = <0 2>;
        };

        Lbracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 7>;
            layers = <0 2>;
            require-prior-idle-ms = <175>;
        };

        Rbracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
            layers = <0 2>;
            require-prior-idle-ms = <175>;
        };

        lesser_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <30 18>;
            layers = <0 2>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <32 20>;
            layers = <0 2>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <26 14>;
            layers = <0 2>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <23 24>;
            layers = <0 2>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <22 23>;
            layers = <0 2>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <30 31>;
            layers = <0 2>;
        };

        bkspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <32 31>;
            layers = <0 2>;
            require-prior-idle-ms = <75>;
        };

        gaming {
            bindings = <&tog 1>;
            key-positions = <28 16>;
            layers = <0 1>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <18 6>;
            layers = <0 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_colemak_dh {
            bindings = <
&kp Q               &kp W           &kp F               &kp P             &kp B                                          &kp J  &kp L             &kp U               &kp Y           &kp SINGLE_QUOTE
&mt LEFT_CONTROL A  &mt LEFT_ALT R  &mt LEFT_COMMAND S  &mt LEFT_SHIFT T  &kp G      &kp PRINTSCREEN      &kp DEL        &kp M  &mt LEFT_SHIFT N  &mt LEFT_COMMAND E  &mt LEFT_ALT I  &mt LEFT_CONTROL O
&kp Z               &kp X           &kp C               &kp D             &kp V      &kp TAB              &kp BACKSPACE  &kp K  &kp H             &semi_comma         &dot_colon      &question_exclamation
&none               &none           &none               &lt 5 ESCAPE      &kp SPACE  &kp LSHIFT           &kp ENTER      &mo 2                                                        &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_AC_SCROLL_UP C_AC_SCROLL_DOWN>;
        };

        gaming {
            bindings = <
&kp ESCAPE        &kp KP_NUMBER_7  &kp KP_N8        &kp KP_NUMBER_9  &none                                   &none  &kp F9  &kp F10  &kp F11  &kp F12
&kp LEFT_SHIFT    &kp KP_NUMBER_4  &kp KP_NUMBER_2  &kp KP_NUMBER_6  &none      &kp C_PLAY_PAUSE      &none  &none  &kp F5  &kp F6   &kp F7   &kp F8
&kp LEFT_CONTROL  &kp KP_NUMBER_1  &mo 4            &kp KP_NUMBER_3  &none      &none                 &none  &none  &kp F1  &kp F2   &kp F3   &kp F4
&kp LEFT_ALT      &kp PRINTSCREEN  &none            &none            &kp SPACE  &none                 &none  &none                            &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        numbers_navigation {
            bindings = <
&kp C_VOLUME_UP    &kp HOME    &kp UP_ARROW    &kp END     &kp PAGE_UP                      &none           &kp N7        &kp N8        &kp N9        &kp COLON
&kp K_MUTE         &kp LEFT    &kp DOWN_ARROW  &kp RIGHT   &kp PAGE_DOWN  &none      &none  &kp UNDERSCORE  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp NUMBER_0
&kp C_VOLUME_DOWN  &kp C_PREV  &kp C_PLAY      &kp C_NEXT  &none          &none      &none  &kp COMMA       &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DOT
&none              &none       &none           &none       &kp SPACE      &none      &none  &none                                                     &none
            >;
        };

        keebconfig {
            bindings = <
&none         &none         &none         &none        &none                                         &bl BL_ON    &none  &none  &none  &none
&none         &none         &none         &none        &none        &bt BT_CLR_ALL      &bt BT_NXT   &none        &none  &none  &none  &none
&none         &none         &none         &none        &none        &bt BT_CLR          &bt BT_PRV   &none        &none  &none  &none  &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bootloader  &bootloader  &to 0               &bootloader  &bootloader                       &none
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB4  &mo 5     &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&none  &none  &none  &none  &none                    &none  &none      &none     &none      &none
&none  &none  &none  &none  &none  &none      &none  &none  &mkp LCLK  &mkp MB3  &mkp RCLK  &none
&none  &none  &none  &none  &none  &none      &none  &none  &mkp MB4   &none     &mkp MB5   &none
&none  &none  &none  &none  &none  &none      &none  &none                                  &none
            >;
        };
    };
};
